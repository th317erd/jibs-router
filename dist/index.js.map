{"version":3,"file":"index.js","mappings":"AACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,2BCAlF,MAAM,UAAEI,GAAcC,OAAOC,OAAOC,IAAI,UAEzB,MAAMC,eAAeJ,EAClCK,eAAeC,GACbC,SAASD,GAETL,OAAOO,iBAAiB,WAAYC,KAAKC,YAEzCD,KAAKE,QAAQC,OAAS,CAAC,EACvBH,KAAKE,QAAQE,OAASJ,KACtBA,KAAKE,QAAQE,OAAOC,SAAWL,KAAKK,SAEpCL,KAAKM,oBAAoBN,KAAKO,qBAChC,CAEAC,UACEhB,OAAOiB,oBAAoB,WAAYT,KAAKC,YAC5CH,MAAMU,SACR,CAEAP,aACED,KAAKM,oBAAoBN,KAAKO,qBAChC,CAEAG,YAAYC,EAAUC,GACpB,GAAIA,aAAmBC,OACrB,OAAOF,EAASG,SAASC,MAAMH,GAC5B,GAAuB,mBAAZA,EACd,OAAOA,EAAQtB,KAAKU,KAAMW,GAE1B,MAAM,IAAIK,UAAU,2EACxB,CAEAV,oBAAoBK,GAClB,IAAIR,EAASH,KAAKiB,MAAMd,QAAU,GAElC,IAAK,IAAIe,KAASf,EAAQ,CACxB,IAAI,QACFS,EAAO,OACPO,EACAD,MAAOE,GACLF,EAEAG,EAASrB,KAAKU,YAAYC,EAAUC,GACxC,GAAIS,EAAQ,CACV,IAAIC,EAAeH,EAAO7B,KAAKU,KAAMqB,EAAQV,QACxBY,IAAjBD,IACFA,EAAe,MAEbF,IACFpB,KAAKE,QAAQC,OAAS,IAAMH,KAAKE,QAAQC,QAAU,CAAC,EAAI,CAACiB,GAAYE,GACzE,CACF,CACF,CAEAE,mBAAmBC,GACjB,IAAIC,EAAgB,IAAIC,IAAIF,GACxBG,EAAgB,CAAC,EAErB,IAAK,IAAMhD,EAAKiD,KAAWH,EAAIE,aAC7BA,EAAahD,GAAOiD,EAiBtB,MAfe,CACbC,KAAcJ,EAAII,KAClBC,KAAcL,EAAIK,KAClBC,SAAcN,EAAIM,SAClBC,KAAcP,EAAIO,KAClBC,OAAcR,EAAIQ,OAClBC,SAAcT,EAAIS,SAClBrB,SAAcY,EAAIZ,SAClBsB,KAAcV,EAAIU,KAClBC,SAAcX,EAAIW,SAClBC,OAAcZ,EAAIY,OAClBV,aAAcA,EACdW,SAAcb,EAAIa,SAItB,CAEAhC,qBACE,OAAOP,KAAKwB,mBAAmBhC,OAAOmB,SAASsB,KACjD,CAEA5B,SAASmC,EAAOC,GACd,IAAKD,EACH,OAEF,IAAIE,EAAUD,GAAY,CAAC,EACvBR,EAAUO,EAAMG,WACf,WAAaC,KAAKX,KACrBA,EAAO,GAAGzC,OAAOmB,SAASuB,UAAWD,KAEvCA,EAAOA,EAAKY,QAAQ,UAAW,KAE/B,IAAInB,EAAU,IAAIC,IAAIM,GAClBK,EAAUZ,EAAIE,aAAae,WAC3BG,EAAU,GAAGpB,EAAIZ,WAAW,EAAW,IAAIwB,IAAW,KAAMZ,EAAQ,KAAI,IAAIA,EAAII,OAAS,KACzFiB,EAAU/C,KAAKwB,mBAAmBS,IAEd,IAApBS,EAAQM,SACVxD,OAAOwD,QAASN,EAAe,QAAI,eAAiB,aAClD,CACEO,SAAUjD,KAAKO,qBACfwC,WAEF,GACAD,GAIJ9C,KAAKM,oBAAoByC,EAC3B,CAEA5B,OAAO+B,GACL,OAAOA,CACT,E","sources":["webpack://jibs-router/webpack/bootstrap","webpack://jibs-router/webpack/runtime/define property getters","webpack://jibs-router/webpack/runtime/hasOwnProperty shorthand","webpack://jibs-router/./lib/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const { Component } = window[Symbol.for('@jibs')];\n\nexport default class Router extends Component {\n  constructor(...args) {\n    super(...args);\n\n    window.addEventListener('popstate', this.onPopState);\n\n    this.context.routes = {};\n    this.context.router = this;\n    this.context.router.navigate = this.navigate;\n\n    this.renderMatchingRoute(this.getCurrentLocation());\n  }\n\n  destroy() {\n    window.removeEventListener('popstate', this.onPopState);\n    super.destroy();\n  }\n\n  onPopState() {\n    this.renderMatchingRoute(this.getCurrentLocation());\n  }\n\n  matchesPath(location, pattern) {\n    if (pattern instanceof RegExp)\n      return location.pathname.match(pattern);\n    else if (typeof pattern === 'function')\n      return pattern.call(this, location);\n    else\n      throw new TypeError('\"pattern\" must be a regular expression (RegExp) instance, or a function.');\n  }\n\n  renderMatchingRoute(location) {\n    let routes = this.props.routes || [];\n\n    for (let route of routes) {\n      let {\n        pattern,\n        render,\n        route: routeName,\n      } = route;\n\n      let result = this.matchesPath(location, pattern);\n      if (result) {\n        let renderResult = render.call(this, result, location);\n        if (renderResult === undefined)\n          renderResult = null;\n\n        if (routeName)\n          this.context.routes = { ...(this.context.routes || {}), [routeName]: renderResult };\n      }\n    }\n  }\n\n  getLocationFromURL(_url) {\n    let url           = new URL(_url);\n    let searchParams  = {};\n\n    for (let [ key, value ] of url.searchParams)\n      searchParams[key] = value;\n\n    var location = {\n      hash:         url.hash,\n      host:         url.host,\n      hostname:     url.hostname,\n      href:         url.href,\n      origin:       url.origin,\n      password:     url.password,\n      pathname:     url.pathname,\n      port:         url.port,\n      protocol:     url.protocol,\n      search:       url.search,\n      searchParams: searchParams,\n      username:     url.username,\n    };\n\n    return location;\n  }\n\n  getCurrentLocation() {\n    return this.getLocationFromURL(window.location.href);\n  }\n\n  navigate(_href, _options) {\n    if (!_href)\n      return;\n\n    let options = _options || {};\n    let href    = _href.toString();\n    if (!(/^[\\w-]+:/).test(href))\n      href = `${window.location.origin}\\/${href}`;\n\n    href = href.replace(/\\/{2,}/g, '/');\n\n    let url     = new URL(href);\n    let search  = url.searchParams.toString();\n    let newURL  = `${url.pathname}${(search) ? `?${search}` : ''}${(url.hash) ? `#${url.hash}` : ''}`;\n    let current = this.getLocationFromURL(href);\n\n    if (options.history !== false) {\n      window.history[(options.replace) ? 'replaceState' : 'pushState'](\n        {\n          previous: this.getCurrentLocation(),\n          current,\n        },\n        '',\n        newURL,\n      );\n    }\n\n    this.renderMatchingRoute(current);\n  }\n\n  render(children) {\n    return children;\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Component","window","Symbol","for","Router","constructor","args","super","addEventListener","this","onPopState","context","routes","router","navigate","renderMatchingRoute","getCurrentLocation","destroy","removeEventListener","matchesPath","location","pattern","RegExp","pathname","match","TypeError","props","route","render","routeName","result","renderResult","undefined","getLocationFromURL","_url","url","URL","searchParams","value","hash","host","hostname","href","origin","password","port","protocol","search","username","_href","_options","options","toString","test","replace","newURL","current","history","previous","children"],"sourceRoot":""}